{"ast":null,"code":"import _objectSpread from \"/Users/sowmyareddykallu/Downloads/reward-points-master/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\nconst calculatePoints = transaction => {\n  let points = 0;\n  let over100 = transaction.amt - 100;\n\n  if (over100 > 0) {\n    // A customer receives 2 points for every dollar spent over $100 in each transaction\n    points += over100 * 2;\n  }\n\n  if (transaction.amt > 50) {\n    // plus 1 point for every dollar spent over $50 in each transaction\n    if (transaction.amt > 100) {\n      points += 50;\n    } else {\n      points += (transaction.amt - 50) * 1;\n    }\n  }\n\n  const month = new Date(transaction.transactionDt).getMonth();\n  return _objectSpread({}, transaction, {\n    points,\n    month\n  });\n};\n\nconst calculateResults = incomingData => {\n  // Calculate points per transaction\n  const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const pointsPerTransaction = incomingData.map(transaction => {\n    return calculatePoints(transaction);\n  });\n  let byCustomer = {};\n  let totalPointsByCustomer = {};\n  pointsPerTransaction.forEach(pointsPerTransaction => {\n    let custid = pointsPerTransaction.custid,\n        name = pointsPerTransaction.name,\n        month = pointsPerTransaction.month,\n        points = pointsPerTransaction.points;\n\n    if (!byCustomer[custid]) {\n      byCustomer[custid] = [];\n    }\n\n    if (!totalPointsByCustomer[custid]) {\n      totalPointsByCustomer[name] = 0;\n    }\n\n    totalPointsByCustomer[name] += points;\n\n    if (byCustomer[custid][month]) {\n      byCustomer[custid][month].points += points;\n      byCustomer[custid][month].monthNumber = month;\n      byCustomer[custid][month].numTransactions++;\n    } else {\n      byCustomer[custid][month] = {\n        custid,\n        name,\n        monthNumber: month,\n        month: months[month],\n        numTransactions: 1,\n        points\n      };\n    }\n  });\n  let tot = [];\n\n  for (var custKey in byCustomer) {\n    byCustomer[custKey].forEach(cRow => {\n      tot.push(cRow);\n    });\n  }\n\n  let totByCustomer = [];\n\n  for (custKey in totalPointsByCustomer) {\n    totByCustomer.push({\n      name: custKey,\n      points: totalPointsByCustomer[custKey]\n    });\n  }\n\n  return {\n    summaryByCustomer: tot,\n    pointsPerTransaction,\n    totalPointsByCustomer: totByCustomer\n  };\n};\n\nexport default calculateResults;","map":{"version":3,"sources":["/Users/sowmyareddykallu/Downloads/reward-points-master/src/calculateResults.js"],"names":["calculatePoints","transaction","points","over100","amt","month","Date","transactionDt","getMonth","calculateResults","incomingData","months","pointsPerTransaction","map","byCustomer","totalPointsByCustomer","forEach","custid","name","monthNumber","numTransactions","tot","custKey","cRow","push","totByCustomer","summaryByCustomer"],"mappings":"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","sourcesContent":["\nconst calculatePoints =transaction=>{\n  let points = 0;\n  let over100 = transaction.amt - 100;\n\n  if (over100 > 0) {\n    // A customer receives 2 points for every dollar spent over $100 in each transaction\n    points += (over100 * 2);\n  }\n  if (transaction.amt > 50 ) {\n    // plus 1 point for every dollar spent over $50 in each transaction\n    if( transaction.amt > 100)\n    {\n      points += 50;\n    }\n      else {\n          points += ((transaction.amt - 50) * 1);\n      }\n  }\n  const month = new Date(transaction.transactionDt).getMonth();\n  return {...transaction, points, month};\n}\n\nconst calculateResults=incomingData => {\n  // Calculate points per transaction\n  const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const pointsPerTransaction = incomingData.map(transaction=> {\n    return calculatePoints(transaction);\n  });\n\n  let byCustomer = {};\n  let totalPointsByCustomer = {};\n  pointsPerTransaction.forEach(pointsPerTransaction => {\n    let {custid, name, month, points} = pointsPerTransaction;\n    if (!byCustomer[custid]) {\n      byCustomer[custid] = [];\n    }\n    if (!totalPointsByCustomer[custid]) {\n      totalPointsByCustomer[name] = 0;\n    }\n    totalPointsByCustomer[name] += points;\n    if (byCustomer[custid][month]) {\n      byCustomer[custid][month].points += points;\n      byCustomer[custid][month].monthNumber = month;\n      byCustomer[custid][month].numTransactions++;\n    }\n    else {\n\n      byCustomer[custid][month] = {\n        custid,\n        name,\n        monthNumber:month,\n        month: months[month],\n        numTransactions: 1,\n        points\n      }\n    }\n  });\n  let tot = [];\n  for (var custKey in byCustomer) {\n    byCustomer[custKey].forEach(cRow=> {\n      tot.push(cRow);\n    });\n  }\n\n  let totByCustomer = [];\n  for (custKey in totalPointsByCustomer) {\n    totByCustomer.push({\n      name: custKey,\n      points: totalPointsByCustomer[custKey]\n    });\n  }\n  return {\n    summaryByCustomer: tot,\n    pointsPerTransaction,\n    totalPointsByCustomer:totByCustomer\n  };\n}\n\nexport default calculateResults;\n"]},"metadata":{},"sourceType":"module"}