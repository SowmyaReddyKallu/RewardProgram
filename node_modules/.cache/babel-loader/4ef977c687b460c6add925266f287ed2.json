{"ast":null,"code":"import _objectSpread from \"/Users/sowmyareddykallu/Downloads/reward-points-master/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _ from 'lodash';\nexport const getIndividualTransactions = (row, tranData) => {\n  let byCustMonth = _.filter(tranData.pointsPerTransaction, tRow => {\n    return row.original.custid === tRow.custid && row.original.monthNumber === tRow.month;\n  });\n\n  return byCustMonth;\n};\nexport const calculateResults = incomingData => {\n  // Calculate points per transaction\n  const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const pointsPerTransaction = incomingData.map(transaction => {\n    return calculatePoints(transaction);\n  });\n  let byCustomer = {};\n  let totalPointsByCustomer = {};\n  pointsPerTransaction.forEach(pointsPerTransaction => {\n    let custid = pointsPerTransaction.custid,\n        name = pointsPerTransaction.name,\n        month = pointsPerTransaction.month,\n        points = pointsPerTransaction.points;\n\n    if (!byCustomer[custid]) {\n      byCustomer[custid] = [];\n    }\n\n    if (!totalPointsByCustomer[custid]) {\n      totalPointsByCustomer[name] = 0;\n    }\n\n    totalPointsByCustomer[name] += points;\n\n    if (byCustomer[custid][month]) {\n      byCustomer[custid][month].points += points;\n      byCustomer[custid][month].monthNumber = month;\n      byCustomer[custid][month].numTransactions++;\n    } else {\n      byCustomer[custid][month] = {\n        custid,\n        name,\n        monthNumber: month,\n        month: months[month],\n        numTransactions: 1,\n        points\n      };\n    }\n  });\n  let tot = [];\n\n  for (var custKey in byCustomer) {\n    console.log(custKey, byCustomer[custKey]);\n    byCustomer[custKey].forEach(cRow => {\n      tot.push(cRow);\n    });\n  }\n\n  let totByCustomer = [];\n\n  for (custKey in totalPointsByCustomer) {\n    totByCustomer.push({\n      name: custKey,\n      points: totalPointsByCustomer[custKey]\n    });\n  }\n\n  return {\n    summaryByCustomer: tot,\n    pointsPerTransaction,\n    totalPointsByCustomer: totByCustomer\n  };\n};\nexport const calculatePoints = transaction => {\n  let points = 0;\n  let over100 = transaction.amt - 100;\n\n  if (over100 > 0) {\n    // A customer receives 2 points for every dollar spent over $100 in each transaction\n    points += over100 * 2;\n  }\n\n  if (transaction.amt > 50) {\n    // plus 1 point for every dollar spent over $50 in each transaction\n    if (transaction.amt > 100) {\n      points += 50;\n    } else {\n      points += (transaction.amt - 50) * 1;\n    }\n  }\n\n  const month = new Date(transaction.transactionDt).getMonth();\n  return _objectSpread({}, transaction, {\n    points,\n    month\n  });\n};","map":{"version":3,"sources":["/Users/sowmyareddykallu/Downloads/reward-points-master/src/calculateResults.js"],"names":["_","getIndividualTransactions","row","tranData","byCustMonth","filter","pointsPerTransaction","tRow","original","custid","monthNumber","month","calculateResults","incomingData","months","map","transaction","calculatePoints","byCustomer","totalPointsByCustomer","forEach","name","points","numTransactions","tot","custKey","console","log","cRow","push","totByCustomer","summaryByCustomer","over100","amt","Date","transactionDt","getMonth"],"mappings":";AACA,OAAOA,CAAP,MAAc,QAAd;AAEA,OAAO,MAAMC,yBAAyB,GAAE,CAACC,GAAD,EAAKC,QAAL,KAAiB;AACvD,MAAIC,WAAW,GAAGJ,CAAC,CAACK,MAAF,CAASF,QAAQ,CAACG,oBAAlB,EAAyCC,IAAD,IAAQ;AAChE,WAAOL,GAAG,CAACM,QAAJ,CAAaC,MAAb,KAAwBF,IAAI,CAACE,MAA7B,IAAuCP,GAAG,CAACM,QAAJ,CAAaE,WAAb,KAA6BH,IAAI,CAACI,KAAhF;AACD,GAFiB,CAAlB;;AAGA,SAAOP,WAAP;AACD,CALM;AAOP,OAAO,MAAMQ,gBAAgB,GAACC,YAAY,IAAI;AAC5C;AACA,QAAMC,MAAM,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,KAAvE,EAA8E,KAA9E,CAAf;AACA,QAAMR,oBAAoB,GAAGO,YAAY,CAACE,GAAb,CAAiBC,WAAW,IAAG;AAC1D,WAAOC,eAAe,CAACD,WAAD,CAAtB;AACD,GAF4B,CAA7B;AAIA,MAAIE,UAAU,GAAG,EAAjB;AACA,MAAIC,qBAAqB,GAAG,EAA5B;AACAb,EAAAA,oBAAoB,CAACc,OAArB,CAA6Bd,oBAAoB,IAAI;AAAA,QAC9CG,MAD8C,GACfH,oBADe,CAC9CG,MAD8C;AAAA,QACtCY,IADsC,GACff,oBADe,CACtCe,IADsC;AAAA,QAChCV,KADgC,GACfL,oBADe,CAChCK,KADgC;AAAA,QACzBW,MADyB,GACfhB,oBADe,CACzBgB,MADyB;;AAEnD,QAAI,CAACJ,UAAU,CAACT,MAAD,CAAf,EAAyB;AACvBS,MAAAA,UAAU,CAACT,MAAD,CAAV,GAAqB,EAArB;AACD;;AACD,QAAI,CAACU,qBAAqB,CAACV,MAAD,CAA1B,EAAoC;AAClCU,MAAAA,qBAAqB,CAACE,IAAD,CAArB,GAA8B,CAA9B;AACD;;AACDF,IAAAA,qBAAqB,CAACE,IAAD,CAArB,IAA+BC,MAA/B;;AACA,QAAIJ,UAAU,CAACT,MAAD,CAAV,CAAmBE,KAAnB,CAAJ,EAA+B;AAC7BO,MAAAA,UAAU,CAACT,MAAD,CAAV,CAAmBE,KAAnB,EAA0BW,MAA1B,IAAoCA,MAApC;AACAJ,MAAAA,UAAU,CAACT,MAAD,CAAV,CAAmBE,KAAnB,EAA0BD,WAA1B,GAAwCC,KAAxC;AACAO,MAAAA,UAAU,CAACT,MAAD,CAAV,CAAmBE,KAAnB,EAA0BY,eAA1B;AACD,KAJD,MAKK;AAEHL,MAAAA,UAAU,CAACT,MAAD,CAAV,CAAmBE,KAAnB,IAA4B;AAC1BF,QAAAA,MAD0B;AAE1BY,QAAAA,IAF0B;AAG1BX,QAAAA,WAAW,EAACC,KAHc;AAI1BA,QAAAA,KAAK,EAAEG,MAAM,CAACH,KAAD,CAJa;AAK1BY,QAAAA,eAAe,EAAE,CALS;AAM1BD,QAAAA;AAN0B,OAA5B;AAQD;AACF,GAzBD;AA0BA,MAAIE,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIC,OAAT,IAAoBP,UAApB,EAAgC;AAC9BQ,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ,EAAoBP,UAAU,CAACO,OAAD,CAA9B;AACAP,IAAAA,UAAU,CAACO,OAAD,CAAV,CAAoBL,OAApB,CAA4BQ,IAAI,IAAG;AACjCJ,MAAAA,GAAG,CAACK,IAAJ,CAASD,IAAT;AACD,KAFD;AAGD;;AAED,MAAIE,aAAa,GAAG,EAApB;;AACA,OAAKL,OAAL,IAAgBN,qBAAhB,EAAuC;AACrCW,IAAAA,aAAa,CAACD,IAAd,CAAmB;AACjBR,MAAAA,IAAI,EAAEI,OADW;AAEjBH,MAAAA,MAAM,EAAEH,qBAAqB,CAACM,OAAD;AAFZ,KAAnB;AAID;;AACD,SAAO;AACLM,IAAAA,iBAAiB,EAAEP,GADd;AAELlB,IAAAA,oBAFK;AAGLa,IAAAA,qBAAqB,EAACW;AAHjB,GAAP;AAKD,CAvDM;AA0DP,OAAO,MAAMb,eAAe,GAAED,WAAW,IAAE;AACzC,MAAIM,MAAM,GAAG,CAAb;AACA,MAAIU,OAAO,GAAGhB,WAAW,CAACiB,GAAZ,GAAkB,GAAhC;;AAEA,MAAID,OAAO,GAAG,CAAd,EAAiB;AACf;AACAV,IAAAA,MAAM,IAAKU,OAAO,GAAG,CAArB;AACD;;AACD,MAAIhB,WAAW,CAACiB,GAAZ,GAAkB,EAAtB,EAA2B;AACzB;AACA,QAAIjB,WAAW,CAACiB,GAAZ,GAAkB,GAAtB,EACA;AACEX,MAAAA,MAAM,IAAI,EAAV;AACD,KAHD,MAIO;AACDA,MAAAA,MAAM,IAAK,CAACN,WAAW,CAACiB,GAAZ,GAAkB,EAAnB,IAAyB,CAApC;AACH;AACJ;;AACD,QAAMtB,KAAK,GAAG,IAAIuB,IAAJ,CAASlB,WAAW,CAACmB,aAArB,EAAoCC,QAApC,EAAd;AACA,2BAAWpB,WAAX;AAAwBM,IAAAA,MAAxB;AAAgCX,IAAAA;AAAhC;AACD,CApBM","sourcesContent":["\nimport _ from 'lodash';\n\nexport const getIndividualTransactions =(row,tranData) =>{\n  let byCustMonth = _.filter(tranData.pointsPerTransaction, (tRow)=>{\n    return row.original.custid === tRow.custid && row.original.monthNumber === tRow.month;\n  });\n  return byCustMonth;\n}\n\nexport const calculateResults=incomingData => {\n  // Calculate points per transaction\n  const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const pointsPerTransaction = incomingData.map(transaction=> {\n    return calculatePoints(transaction);\n  });\n\n  let byCustomer = {};\n  let totalPointsByCustomer = {};\n  pointsPerTransaction.forEach(pointsPerTransaction => {\n    let {custid, name, month, points} = pointsPerTransaction;\n    if (!byCustomer[custid]) {\n      byCustomer[custid] = [];\n    }\n    if (!totalPointsByCustomer[custid]) {\n      totalPointsByCustomer[name] = 0;\n    }\n    totalPointsByCustomer[name] += points;\n    if (byCustomer[custid][month]) {\n      byCustomer[custid][month].points += points;\n      byCustomer[custid][month].monthNumber = month;\n      byCustomer[custid][month].numTransactions++;\n    }\n    else {\n\n      byCustomer[custid][month] = {\n        custid,\n        name,\n        monthNumber:month,\n        month: months[month],\n        numTransactions: 1,\n        points\n      }\n    }\n  });\n  let tot = [];\n  for (var custKey in byCustomer) {\n    console.log(custKey,byCustomer[custKey]);\n    byCustomer[custKey].forEach(cRow=> {\n      tot.push(cRow);\n    });\n  }\n\n  let totByCustomer = [];\n  for (custKey in totalPointsByCustomer) {\n    totByCustomer.push({\n      name: custKey,\n      points: totalPointsByCustomer[custKey]\n    });\n  }\n  return {\n    summaryByCustomer: tot,\n    pointsPerTransaction,\n    totalPointsByCustomer:totByCustomer\n  };\n}\n\n\nexport const calculatePoints =transaction=>{\n  let points = 0;\n  let over100 = transaction.amt - 100;\n\n  if (over100 > 0) {\n    // A customer receives 2 points for every dollar spent over $100 in each transaction\n    points += (over100 * 2);\n  }\n  if (transaction.amt > 50 ) {\n    // plus 1 point for every dollar spent over $50 in each transaction\n    if( transaction.amt > 100)\n    {\n      points += 50;\n    }\n      else {\n          points += ((transaction.amt - 50) * 1);\n      }\n  }\n  const month = new Date(transaction.transactionDt).getMonth();\n  return {...transaction, points, month};\n}\n"]},"metadata":{},"sourceType":"module"}