{"ast":null,"code":"const isLocalhost = Boolean(window.location.hostname === 'localhost' || window.location.hostname === '[::1]' || window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function enroll(config) {\n  if (process.env.NODE_ENV === 'production' && 'workServer' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const wsUrl = \"\".concat(process.env.PUBLIC_URL, \"/work-server.js\");\n\n      if (isLocalhost) {\n        checkValidWorkServer(wsUrl, config);\n        navigator.workServer.ready.then(() => {\n          console.log('Work Service Cache initially');\n        });\n      } else {\n        enrollValidWS(wsUrl, config);\n      }\n    });\n  }\n}\n\nfunction enrollValidWS(wsUrl, config) {\n  navigator.workServer.enroll(wsUrl).then(enrolling => {\n    enrolling.onupdatefound = () => {\n      const installingWorker = enrolling.installing;\n\n      if (installingWorker == null) {\n        return;\n      }\n\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.workServer.controller) {\n            console.log('Latest Data is available'); // Execute callback\n\n            if (config && config.onUpdate) {\n              config.onUpdate(enrolling);\n            }\n          } else {\n            console.log('Data is used when there is no network'); // Execute callback\n\n            if (config && config.onSuccess) {\n              config.onSuccess(enrolling);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('Error during service worker enrolling:', error);\n  });\n}\n\nfunction checkValidWorkServer(wsUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(wsUrl).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get('content-type');\n\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      navigator.workServer.ready.then(enrolling => {\n        enrolling.unenroll().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      enrollValidWS(wsUrl, config);\n    }\n  }).catch(() => {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport function unenroll() {\n  if ('workServer' in navigator) {\n    navigator.workServer.ready.then(enrolling => {\n      enrolling.unenroll();\n    });\n  }\n}","map":{"version":3,"sources":["/Users/sowmyareddykallu/Downloads/CustomerRewardSystem/src/workServer.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","enroll","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","wsUrl","checkValidWorkServer","workServer","ready","then","console","log","enrollValidWS","enrolling","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","response","contentType","headers","get","status","indexOf","unenroll","reload"],"mappings":"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","sourcesContent":["\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function enroll(config) {\n  if (process.env.NODE_ENV === 'production' && 'workServer' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const wsUrl = `${process.env.PUBLIC_URL}/work-server.js`;\n\n      if (isLocalhost) {\n        checkValidWorkServer(wsUrl, config);\n\n        navigator.workServer.ready.then(() => {\n          console.log(\n            'Work Service Cache initially'\n          );\n        });\n      } else {\n        enrollValidWS(wsUrl, config);\n      }\n    });\n  }\n}\n\nfunction enrollValidWS(wsUrl, config) {\n  navigator.workServer\n    .enroll(wsUrl)\n    .then(enrolling => {\n      enrolling.onupdatefound = () => {\n        const installingWorker = enrolling.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.workServer.controller) {\n              console.log(\n                'Latest Data is available'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(enrolling);\n              }\n            } else {\n              console.log('Data is used when there is no network');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(enrolling);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker enrolling:', error);\n    });\n}\n\nfunction checkValidWorkServer(wsUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(wsUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        navigator.workServer.ready.then(enrolling => {\n          enrolling.unenroll().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        enrollValidWS(wsUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unenroll() {\n  if ('workServer' in navigator) {\n    navigator.workServer.ready.then(enrolling => {\n      enrolling.unenroll();\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}