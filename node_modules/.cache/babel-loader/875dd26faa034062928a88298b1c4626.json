{"ast":null,"code":"import _objectSpread from \"/Users/sowmyareddykallu/Downloads/CustomerRewardSystem/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _ from 'lodash';\nexport const getSingleDeals = (row, tranData) => {\n  let byCustMonth = _.filter(tranData.pointsPerTransaction, tRow => {\n    return row.original.custid === tRow.custid && row.original.monthNumber - 1 === tRow.month;\n  });\n\n  return byCustMonth;\n};\nexport const computeOutcomes = incomingData => {\n  const months = [\"January\", \"Febraury\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const pointsPerTransaction = incomingData.map(transaction => {\n    return calculatePoints(transaction);\n  });\n  let byCustomer = {};\n  let sumOfRewardPointsByUser = {};\n  pointsPerTransaction.forEach(pointsPerTransaction => {\n    let custid = pointsPerTransaction.custid,\n        name = pointsPerTransaction.name,\n        month = pointsPerTransaction.month,\n        rewards = pointsPerTransaction.rewards;\n\n    if (!byCustomer[custid]) {\n      byCustomer[custid] = [];\n    }\n\n    if (!sumOfRewardPointsByUser[custid]) {\n      sumOfRewardPointsByUser[name] = 0;\n    }\n\n    sumOfRewardPointsByUser[name] += rewards;\n\n    if (byCustomer[custid][month]) {\n      byCustomer[custid][month].rewards += rewards;\n      byCustomer[custid][month].monthNumber = month + 1;\n      byCustomer[custid][month].numTransactions++;\n    } else {\n      byCustomer[custid][month] = {\n        custid,\n        name,\n        monthNumber: month + 1,\n        month: months[month],\n        numTransactions: 1,\n        rewards\n      };\n    }\n  });\n  let tot = [];\n\n  for (var custKey in byCustomer) {\n    byCustomer[custKey].forEach(cRow => {\n      tot.push(cRow);\n    });\n  }\n\n  let totByCustomer = [];\n\n  for (custKey in sumOfRewardPointsByUser) {\n    totByCustomer.push({\n      name: custKey,\n      rewards: sumOfRewardPointsByUser[custKey]\n    });\n  }\n\n  return {\n    sumByUser: tot,\n    pointsPerTransaction,\n    sumOfRewardPointsByUser: totByCustomer\n  };\n};\nexport const calculatePoints = transaction => {\n  let rewards = 0;\n  let over100 = transaction.cost - 100;\n\n  if (over100 > 0) {\n    rewards += over100 * 2;\n  }\n\n  if (transaction.cost > 50) {\n    // plus 1 point for every dollar spent over $50 in each transaction\n    if (transaction.cost > 100) {\n      rewards += 50;\n    } else {\n      rewards += (transaction.cost - 50) * 1;\n    }\n  }\n\n  const month = new Date(transaction.dealDate).getMonth();\n  return _objectSpread({}, transaction, {\n    rewards,\n    month\n  });\n};","map":{"version":3,"sources":["/Users/sowmyareddykallu/Downloads/CustomerRewardSystem/src/computeOutcomes.js"],"names":["_","getSingleDeals","row","tranData","byCustMonth","filter","pointsPerTransaction","tRow","original","custid","monthNumber","month","computeOutcomes","incomingData","months","map","transaction","calculatePoints","byCustomer","sumOfRewardPointsByUser","forEach","name","rewards","numTransactions","tot","custKey","cRow","push","totByCustomer","sumByUser","over100","cost","Date","dealDate","getMonth"],"mappings":"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","sourcesContent":["\nimport _ from 'lodash';\n\nexport const getSingleDeals =(row,tranData) =>{\n  let byCustMonth = _.filter(tranData.pointsPerTransaction, (tRow)=>{\n    return row.original.custid === tRow.custid && (row.original.monthNumber -1) === tRow.month;\n  });\n  return byCustMonth;\n}\n\nexport const computeOutcomes=incomingData => {\n  const months = [\"January\", \"Febraury\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const pointsPerTransaction = incomingData.map(transaction=> {\n    return calculatePoints(transaction);\n  });\n\n  let byCustomer = {};\n  let sumOfRewardPointsByUser = {};\n  pointsPerTransaction.forEach(pointsPerTransaction => {\n    let {custid, name, month, rewards} = pointsPerTransaction;\n    if (!byCustomer[custid]) {\n      byCustomer[custid] = [];\n    }\n    if (!sumOfRewardPointsByUser[custid]) {\n      sumOfRewardPointsByUser[name] = 0;\n    }\n    sumOfRewardPointsByUser[name] += rewards;\n    if (byCustomer[custid][month]) {\n      byCustomer[custid][month].rewards += rewards;\n      byCustomer[custid][month].monthNumber = month+1;\n      byCustomer[custid][month].numTransactions++;\n    }\n    else {\n\n      byCustomer[custid][month] = {\n        custid,\n        name,\n        monthNumber:month +1,\n        month: months[month],\n        numTransactions: 1,\n        rewards\n      }\n    }\n  });\n  let tot = [];\n  for (var custKey in byCustomer) {\n    byCustomer[custKey].forEach(cRow=> {\n      tot.push(cRow);\n    });\n  }\n\n  let totByCustomer = [];\n  for (custKey in sumOfRewardPointsByUser) {\n    totByCustomer.push({\n      name: custKey,\n      rewards: sumOfRewardPointsByUser[custKey]\n    });\n  }\n  return {\n    sumByUser: tot,\n    pointsPerTransaction,\n    sumOfRewardPointsByUser:totByCustomer\n  };\n}\n\n\nexport const calculatePoints =transaction=>{\n  let rewards = 0;\n  let over100 = transaction.cost - 100;\n\n  if (over100 > 0) {\n    rewards += (over100 * 2);\n  }\n  if (transaction.cost > 50 ) {\n    // plus 1 point for every dollar spent over $50 in each transaction\n    if( transaction.cost > 100)\n    {\n      rewards += 50;\n    }\n      else {\n          rewards += ((transaction.cost - 50) * 1);\n      }\n  }\n  const month = new Date(transaction.dealDate).getMonth();\n  return {...transaction, rewards, month};\n}\n"]},"metadata":{},"sourceType":"module"}